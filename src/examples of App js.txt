import React from 'react';

// const App = () => <h1> Hello </h1>;

//this type of Component can't have states

class App extends React.Component {
  render() {
    return <h1 className = "myname" >Hello World</h1>
    // return React.createElement('h1',null,'Hello Nandu');
  }
}

//this type of Component can have states


export default App;

///////////////


import React from 'react';


class App extends React.Component {
  render() {
    return <div>
        <h1 className = "myname" >Hello World</h1> 
        <b>Bold</b>
      </div>
    
  }
}

export default App;


///////////////

//wrap in () to use whitespace

import React from 'react';


class App extends React.Component {
  render() {
    return (
      <div>
        <h1 className = "myname" >Hello World</h1> 
        <b>Bold</b>
      </div>
    ) 
  }
}

export default App;

///////////////

import React from 'react';


class App extends React.Component {
  render() {
        return <h1> { this.props.txt } </h1>
      }
}

export default App;

///////

index.js for this

import React from 'react';
import ReactDom from 'react-dom';
import App from './App';

ReactDom.render(
	<App txt="this is the prop text" />,
	document.getElementById('root')
);



////////

import React from 'react';


class App extends React.Component {
  render() {
        let txt = this.props.txt;
        return <h1> { txt } </h1>
      }
}

export default App;

/////////////

import React from 'react';


class App extends React.Component {
  render() {
        let txt = this.props.txt;
        return <h1> { txt } </h1>
      }
}

App.propTypes = {
  txt: React.PropTypes.string,
  cat: React.PropTypes.number.isRequired
}

App.defaultProps = {
  txt: 'this is default props value'
}

export default App;

////

index.js

import React from 'react';
import ReactDom from 'react-dom';
import App from './App';

ReactDom.render(
	<App cat={4}  />,
	document.getElementById('root')
);

///////////

import React from 'react';


class App extends React.Component {
  constructor () {
    super();
    this.state = {
      txt : 'this is the state text'
    }
  }
  update (e) {
      this.setState({txt : e.target.value})
  }
  render() {
        return  (
            <div>
              <input type='text' onChange={this.update.bind(this)} />
              <h1> {this.state.txt} </h1>
            </div>
          )
      }
}
export default App;

////////

import React from 'react';


class App extends React.Component {
  constructor () {
    super();
    this.state = {
      txt : 'this is the state text'
    }
  }
  update (e) {
      this.setState({txt : e.target.value})
  }
  render() {
        return  (
            <div>
              <Widget update={this.update.bind(this)} />
              <h1> {this.state.txt} </h1>
            </div>
          )
      }
}

const Widget = (props) =>
  <input type='text' onChange={props.update} />

export default App;

////

import React from 'react';


class App extends React.Component {
  constructor () {
    super();
    this.state = {
      txt : 'this is the state text'
    }
  }
  update (e) {
      this.setState({txt : e.target.value})
  }
  render() {
        return  (
            <div>
              <Widget update={this.update.bind(this)} />
              <Widget update={this.update.bind(this)} />
              <Widget update={this.update.bind(this)} />
              <Widget update={this.update.bind(this)} />
              <h1> {this.state.txt} </h1>
            </div>
          )
      }
}

const Widget = (props) =>
  <input type='text' onChange={props.update} />

export default App;

////////

import React from 'react';


class App extends React.Component {
  render() {
        return  <Button>React</Button>
      }
}

const Button = (props) => <button> {props.children} </button>

export default App;

//////

import React from 'react';


class App extends React.Component {
  render() {
        return  <Button>I <Heart /> React</Button>
      }
}

const Button = (props) => <button> {props.children} </button>

class Heart extends React.Component {
  render() {
        return  <span>&hearts;</span>
      }
}

export default App;

///////

import React from 'react';


class App extends React.Component {
  render() {
        return  <Title />
      }
}

const Title = (props) => <h1>Title: {props.text} </h1>

Title.propTypes = {
  text: React.PropTypes.string
}

export default App;

////////////

import React from 'react';


class App extends React.Component {
  render() {
        return  <Title text="12345" />
      }
}

const Title = (props) => <h1>Title: {props.text} </h1>

Title.propTypes = {
  text(props, propName, component) {
      if (!(propName in props)) {
          return new Error(`missing ${propName}`)
      }
      if (props[propName].length < 6) {
          return new Error(`${propName} was too short`)
      }
  }
}

export default App;

//////////

import React from 'react';


class App extends React.Component {
  constructor () {
    super();
    this.state = {currentEvent: "----" }
    this.update = this.update.bind(this)
  }
  update (e) {
    this.setState( {currentEvent: e.type} );
  }
  render() {
      return (
        <div>
            <textarea
            onKeyPress={this.update}
            onCopy={this.update}
            onCut={this.update}
            onPaste={this.update}
            onFocus={this.update}
            onBlur={this.update}
            onDoubleClick={this.update}
            onTouchStart={this.update}
            onTouchMove={this.update}
            onTouchEnd={this.update}
              cols="30"
              rows="10" />
            <h1> {this.state.currentEvent} </h1>
        </div>
      )
      }
}

export default App;

///////////

import React from 'react';


class App extends React.Component {
  constructor () {
    super();
    this.state = {a: "" }
  }
  update () {
    this.setState( 
      { 
        a: this.refs.a.value,
        b: this.refs.b.value
      } 
    );
  }
  render() {
      return (
        <div>
            <input
              ref="a"
              type="text"
              onChange={this.update.bind(this)}
            /> {this.state.a}
            <hr />
            <input
              ref="b"
              type="text"
              onChange={this.update.bind(this)}
            /> {this.state.b}
        </div>
      )
      }
}

export default App;

/////////

import React from 'react';
import ReactDom from 'react-dom';


class App extends React.Component {
  constructor () {
    super();
    this.state = {a: "" }
  }
  update () {
    this.setState( 
      { 
        a: ReactDom.findDOMNode(this.a).value,
        b: this.refs.b.value
      } 
    );
  }
  render() {
      return (
        <div>
            <Input
              ref={ component => this.a = component }
              update={this.update.bind(this)}
            /> {this.state.a}
            <hr />
            <input
              ref="b"
              type="text"
              onChange={this.update.bind(this)}
            /> {this.state.b}
        </div>
      )
      }
}

class Input extends React.Component {
  render() {
        return  <input type="text" onChange={this.props.update} />
      }
}

export default App;


/////////

import React from 'react';


class App extends React.Component {
  constructor () {
    super();
    this.state = {a: "" }
  }
  update () {
    this.setState( 
      { 
        a: this.a.refs.input.value,
        b: this.refs.b.value
      } 
    );
  }
  render() {
      return (
        <div>
            <Input
              ref={ component => this.a = component }
              update={this.update.bind(this)}
            /> {this.state.a}
            <hr />
            <input
              ref="b"
              type="text"
              onChange={this.update.bind(this)}
            /> {this.state.b}
        </div>
      )
      }
}

class Input extends React.Component {
  render() {
        return  <div><input ref="input" type="text" onChange={this.props.update} /></div>
      }
}

export default App;

//////////

import React from 'react';
import ReactDOM from 'react-dom'

class App extends React.Component {
  constructor() {
    super();
    this.state = { val: 0}
    this.update = this.update.bind(this)
  }
  update() {
    this.setState( {val: this.state.val + 1} )
  }
  componentWillMount() {
    console.log("ComponentWillMount");
  }
  render() {
    console.log("Render");
    return <button onClick={this.update}>{this.state.val}</button>
  }
  componentDidMount() {
    console.log('componentDidMount');
  }
  componentWillUnmount() {
    console.log('componentWillUnmount');
  }

}

class Wrapper extends React.Component {
  mount() {
    ReactDOM.render(<App />,document.getElementById('a'));
  }
  unmount() {
    ReactDOM.unmountComponentAtNode(document.getElementById('a'));
  }
  render() {
      return (
        <div>
            <button onClick={this.mount.bind(this)}>Mount</button>
            <button onClick={this.unmount.bind(this)}>Unmount</button>
            <div id="a"></div>
        </div>
      )
  }
}

export default Wrapper;

//////////////////

import React from 'react';
import ReactDOM from 'react-dom'

class App extends React.Component {
  constructor() {
    super();
    this.state = { val: 0}
    this.update = this.update.bind(this)
  }
  update() {
    this.setState( {val: this.state.val + 1} )
  }
  componentWillMount() {
    console.log("ComponentWillMount");
    this.setState({m: 2});
  }
  render() {
    console.log("Render");
    return <button onClick={this.update}>{this.state.val * this.state.m}</button>
  }
  componentDidMount() {
    console.log('componentDidMount');
    this.inc = setInterval(this.update,500)
  }
  componentWillUnmount() {
    console.log('componentWillUnmount');
    clearInterval(this.inc);
  }

}

class Wrapper extends React.Component {
  mount() {
    ReactDOM.render(<App />,document.getElementById('a'));
  }
  unmount() {
    ReactDOM.unmountComponentAtNode(document.getElementById('a'));
  }
  render() {
      return (
        <div>
            <button onClick={this.mount.bind(this)}>Mount</button>
            <button onClick={this.unmount.bind(this)}>Unmount</button>
            <div id="a"></div>
        </div>
      )
  }
}

export default Wrapper;

//////////////////////

import React from 'react';
import ReactDOM from 'react-dom'

class App extends React.Component {
  constructor() {
    super();
    this.state = {increasing: false}
  }
  update() {
    ReactDOM.render(
      <App val={this.props.val+1}/>,document.getElementById('root')
    )
  }
  componentWillReceiveProps(nextProps) {
    this.setState({increasing: nextProps.val > this.props.val})
  }
  shouldComponentUpdate(nextProps,nextState) {
    return nextProps.val % 5 ===0;
  }
  render() {
    console.log(this.state.increasing);
    return (
       <button onClick={this.update.bind(this)}>
         {this.props.val}
       </button>
    )    
  }
  componentDidUpdate(prevProps,preState) {
    console.log(`prevProps: ${prevProps.val}`)
  }
}

App.defaultProps = {val:0}

export default App;

/////////////////////////////


import React from 'react';

class App extends React.Component {
  constructor() {
    super();
    this.state = {items: []}
  }
  componentWillMount() {
    fetch( 'http://swapi.co/api/people/?format=json' )
      .then( response => response.json() )
      .then ( ({results: items}) => this.setState( {items} ) )
  }
  filter(e) {
    this.setState( {filter: e.target.value} )
  }
  render() {
    let items = this.state.items
    if(this.state.filter){
      items = items.filter( item =>
        item.name.toLowerCase()
          .includes(this.state.filter.toLowerCase()))
    }
    return (
        <div>
            <input type='test'
              onChange={this.filter.bind(this)} />
            {items.map( item => 
            <Person key={item.name} person={item} /> )}
        </div>
    )    
  }
}

const Person = (props) => <h4>{props.person.name} - {props.person.eye_color.toUpperCase()}</h4>

export default App;

/////////////////////////////

import React from 'react';

const HOC = (InnerComponent) => class extends React.Component{
    constructor() {
      super();
      this.state = {count: 0}
    }
    componentWillMount() {
      console.log('Wll Mount');
    }
    update() {
      this.setState({count : this.state.count + 1})
    }
    render() {
      return (
        <InnerComponent 
          {...this.props}
          {...this.state}
          update={this.update.bind(this)}
        />
      )
    }
}
class App extends React.Component {
  render() {
      return (
        <div>
            <Button>button</Button>
            <hr/>
            <LabelHOC>Label</LabelHOC>
        </div>
      )
  }
}
const Button = HOC((props) => 
  <button onClick={props.update}>{props.children} - {props.count}</button>
  )

class Label extends React.Component {
  componentWillMount() {
      console.log('Label Wll Mount');
  }
  render() {
    return (
      <label onMouseMove={this.props.update}>{this.props.children} - {this.props.count}</label>
    )
  }
}
const LabelHOC = HOC(Label)
export default App;

//////////////////////////////////

VD-16

index.html

<!DOCTYPE html>
<html>
<head>
  <title>React JS App</title>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/babel-standalone/6.18.1/babel.min.js"></script>
</head>
<body>
    <div id="root"></div>
</body>
</html>

/////////

App.css

body {
    margin: 0px;
    padding: 0px;
    font-family: monospace;
}
header {
    display: block;
    height: 20vh;
    overflow: auto;
    background-color: pink;
    color: red;
    font-size: 28px;
}
.container{
    height: 95vh;
    display: flex;
}
pre {
    background-color: #f8f8f8;
}

pre,textarea {
    width: 50%;
    font-family: monospace;
    font-size: 28px;
    margin: 0px;
    padding: 10px;
    color: #222;
}
textarea:focus {outline: 0}

/////

App.js

import React from 'react';
import './App.css';
class App extends React.Component {
  constructor() {
    super();
    this.state = {
        input: '/* add your jsx here */',
        output: '',
        err: ''
    }
  }
  update(e) {
    let code = e.target.value;
    try{
      this.setState({
        output: window.Babel
        .transform(code, {presets: ['es2015', 'react']})
        .code,
        err: ''
      })
    }catch(err){
      this.setState({err: err.message})
    }
  }
  render() {
      return (
        <div>
            <header>{this.state.err}</header>
            <div className='container'>
                <textarea
                  onChange={this.update.bind(this)}
                  defaultValue={this.state.input} />
                  <pre>
                      {this.state.output}
                  </pre>
            </div>
        </div>
      )
  }
}
export default App;


///////////////////////////////////








